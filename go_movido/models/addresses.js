// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Addresses = sequelize.define('addresses', {
    country: {
      type: DataTypes.STRING,
    },
    city: {
      type: DataTypes.STRING,
    },
    zipcode: {
      type: DataTypes.STRING,
    },
    street: {
      type: DataTypes.STRING,
    },
    floor: {
      type: DataTypes.STRING,
    },
    internetStatus: {
      type: DataTypes.STRING,
    },
    mobilePhone: {
      type: DataTypes.STRING,
    },
    building: {
      type: DataTypes.STRING,
    },
    stairs: {
      type: DataTypes.STRING,
    },
    door: {
      type: DataTypes.STRING,
    },
    gateCode: {
      type: DataTypes.STRING,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    active: {
      type: DataTypes.BOOLEAN,
    },
    phoned: {
      type: DataTypes.BOOLEAN,
    },
    validAddress: {
      type: DataTypes.BOOLEAN,
    },
  }, {
    tableName: 'addresses',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Addresses.associate = (models) => {
    Addresses.belongsTo(models.users, {
      foreignKey: {
        name: 'userIdKey',
        field: 'user_id',
      },
      as: 'user',
    });
    Addresses.hasMany(models.subscriptions, {
      foreignKey: {
        name: 'addressIdKey',
        field: 'address_id',
      },
      as: 'subscriptions',
    });
  };

  return Addresses;
};
